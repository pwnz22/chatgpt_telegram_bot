# language_handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–∑—ã–∫–æ–≤ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat
from telegram.ext import CallbackContext
from telegram.constants import ParseMode
from datetime import datetime
from utils import register_user_if_not_exists
from localization import t, TEXTS

async def language_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø"""
    await register_user_if_not_exists(update, context, update.message.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.message.from_user.id
    chat_id = update.message.chat.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    text = t(user_id, "select_language", chat_id=chat_id)

    keyboard = []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ (–≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        current_lang = db.get_group_attribute(chat_id, "language") or "en"
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        current_lang = db.get_user_attribute(user_id, "language") or "en"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
    languages = [
        ("en", "üá∫üá∏ English"),
        ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    ]

    for lang_code, lang_display in languages:
        if lang_code == current_lang:
            lang_display = "‚úÖ " + lang_display

        keyboard.append([
            InlineKeyboardButton(lang_display, callback_data=f"set_language|{lang_code}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    info_text = t(user_id, "language_info_button", chat_id=chat_id)
    keyboard.append([InlineKeyboardButton(info_text, callback_data="language_info")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def show_language_info(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = query.message.chat.id

    info_text = t(user_id, "language_info_text", chat_id=chat_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_text = t(user_id, "back_to_language", chat_id=chat_id)
    keyboard = [[InlineKeyboardButton(back_text, callback_data="back_to_language_selection")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def back_to_language_selection(update: Update, context: CallbackContext, db):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = query.message.chat.id

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    text = t(user_id, "select_language", chat_id=chat_id)

    keyboard = []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ (–≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        current_lang = db.get_group_attribute(chat_id, "language") or "en"
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        current_lang = db.get_user_attribute(user_id, "language") or "en"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
    languages = [
        ("en", "üá∫üá∏ English"),
        ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    ]

    for lang_code, lang_display in languages:
        if lang_code == current_lang:
            lang_display = "‚úÖ " + lang_display

        keyboard.append([
            InlineKeyboardButton(lang_display, callback_data=f"set_language|{lang_code}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    info_text = t(user_id, "how_language_works", chat_id=chat_id)
    keyboard.append([InlineKeyboardButton(info_text, callback_data="language_info")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def set_language_handle(update: Update, context: CallbackContext, db):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø"""
    await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = query.message.chat.id
    language = query.data.split("|")[1]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —è–∑—ã–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        old_language = db.get_group_attribute(chat_id, "language")
        db.set_group_attribute(chat_id, "language", language)
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        old_language = db.get_user_attribute(user_id, "language")
        db.set_user_attribute(user_id, "language", language)
        db.set_user_attribute(user_id, "last_interaction", datetime.now())

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_commands(context, user_id, language)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
    if chat_id > 0 and old_language is None:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        db.start_new_dialog(user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        reply_text = t(user_id, "start_greeting", chat_id=chat_id)
        reply_text += t(user_id, "help_message", chat_id=chat_id)

        await query.edit_message_text(reply_text, parse_mode=ParseMode.HTML)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º—ã —á–∞—Ç–∞
        await show_chat_modes_handle_from_callback(query, context, db)
        return

    # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    if old_language == language:
        # –Ø–∑—ã–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
            status_text = t(user_id, "group_language_already_set", chat_id=chat_id)
        else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
            status_text = t(user_id, "language_already_set", chat_id=chat_id)

        await query.edit_message_text(status_text, parse_mode=ParseMode.HTML)
        return

    # –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if chat_id > 0:  # –õ–∏—á–Ω—ã–π —á–∞—Ç - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        db.start_new_dialog(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        confirmation_text = t(user_id, "group_language_changed", chat_id=chat_id)
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        confirmation_text = t(user_id, "language_change_notification", chat_id=chat_id)

    await query.edit_message_text(confirmation_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "language_info"
async def language_info_callback_handle(update: Update, context: CallbackContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–µ"""
    await show_language_info(update, context, db)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "back_to_language_selection"
async def back_to_language_callback_handle(update: Update, context: CallbackContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    await back_to_language_selection(update, context, db)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞ –∏–∑ callback
async def show_chat_modes_handle_from_callback(query, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º—ã —á–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_id = query.from_user.id
    chat_id = query.message.chat.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ basic_handlers.py
    from basic_handlers import get_chat_mode_menu
    text, reply_markup = get_chat_mode_menu(0, user_id, chat_id=chat_id, db=db)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def update_user_commands(context: CallbackContext, user_id: int, language: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–æ–º–∞–Ω–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    texts = TEXTS.get(language, TEXTS["en"])
    commands = [
        BotCommand("/new", texts["command_new"]),
        BotCommand("/mode", texts["command_mode"]),
        BotCommand("/retry", texts["command_retry"]),
        BotCommand("/balance", texts["command_balance"]),
        BotCommand("/premium", texts["command_premium"]),
        BotCommand("/settings", texts["command_settings"]),
        BotCommand("/lang", texts["command_lang"]),
        BotCommand("/help", texts["command_help"]),
    ]

    try:
        # Telegram API –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ scope
        scope = BotCommandScopeChat(chat_id=user_id)
        await context.bot.set_my_commands(commands, scope=scope)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass
