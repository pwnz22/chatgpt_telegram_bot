# language_handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–∑—ã–∫–æ–≤ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram.constants import ParseMode
from datetime import datetime
from utils import register_user_if_not_exists
from localization import t

async def language_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await register_user_if_not_exists(update, context, update.message.from_user, db)
    user_id = update.message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    text = t(user_id, "select_language")

    keyboard = []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_lang = db.get_user_attribute(user_id, "language") or "en"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
    languages = [
        ("en", "üá∫üá∏ English"),
        ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    ]

    for lang_code, lang_display in languages:
        if lang_code == current_lang:
            lang_display = "‚úÖ " + lang_display

        keyboard.append([
            InlineKeyboardButton(lang_display, callback_data=f"set_language|{lang_code}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    info_text = t(user_id, "language_info_button")
    keyboard.append([InlineKeyboardButton(info_text, callback_data="language_info")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def show_language_info(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    info_text = t(user_id, "language_info_text")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_text = t(user_id, "back_to_language")
    keyboard = [[InlineKeyboardButton(back_text, callback_data="back_to_language_selection")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def back_to_language_selection(update: Update, context: CallbackContext, db):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    text = t(user_id, "select_language")

    keyboard = []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_lang = db.get_user_attribute(user_id, "language") or "en"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
    languages = [
        ("en", "üá∫üá∏ English"),
        ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    ]

    for lang_code, lang_display in languages:
        if lang_code == current_lang:
            lang_display = "‚úÖ " + lang_display

        keyboard.append([
            InlineKeyboardButton(lang_display, callback_data=f"set_language|{lang_code}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    info_text = t(user_id, "how_language_works")
    keyboard.append([InlineKeyboardButton(info_text, callback_data="language_info")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def set_language_handle(update: Update, context: CallbackContext, db):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)

    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    language = query.data.split("|")[1]
    old_language = db.get_user_attribute(user_id, "language") or "en"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —è–∑—ã–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if old_language == language:
        # –Ø–∑—ã–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_text = t(user_id, "language_already_set")
        await query.edit_message_text(status_text, parse_mode=ParseMode.HTML)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
    db.set_user_attribute(user_id, "language", language)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    db.start_new_dialog(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    confirmation_text = t(user_id, "language_change_notification")

    await query.edit_message_text(confirmation_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "language_info"
async def language_info_callback_handle(update: Update, context: CallbackContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–µ"""
    await show_language_info(update, context, db)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "back_to_language_selection"
async def back_to_language_callback_handle(update: Update, context: CallbackContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    await back_to_language_selection(update, context, db)
