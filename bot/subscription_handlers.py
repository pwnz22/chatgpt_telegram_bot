# subscription_handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
import uuid
from datetime import datetime, timedelta
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram.constants import ParseMode

import config
from utils import register_user_if_not_exists

async def show_premium_plans_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if update.message:
        # –ü—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /premium
        await register_user_if_not_exists(update, context, update.message.from_user, db)
        user_id = update.message.from_user.id
        chat_id = update.message.chat.id
        send_method = update.message.reply_text
    else:
        # –ü—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ callback (–∫–Ω–æ–ø–∫—É)
        await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)
        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat.id
        send_method = update.callback_query.edit_message_text
        await update.callback_query.answer()

    is_premium = db.get_user_subscription_status(user_id)

    text = "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"

    if is_premium:
        subscription = db.db["subscriptions"].find_one({
            "user_id": user_id,
            "status": "active",
            "expires_at": {"$gt": datetime.now()}
        })
        text += f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription['expires_at'].strftime('%d.%m.%Y')}\n\n"

    text += "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Premium:</b>\n"
    text += "‚Ä¢ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤–º–µ—Å—Ç–æ 5)\n"
    text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ GPT-4 –∏ GPT-4o\n"
    text += "‚Ä¢ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤–º–µ—Å—Ç–æ 2)\n"
    text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"

    text += "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
    text += "üóì –ú–µ—Å—è—Ü - 25 —Å–æ–º—á–∏–∫–æ–≤\n"
    text += "üìÖ –ì–æ–¥ - 200 —Å–æ–º—á–∏–∫–æ–≤"

    keyboard = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if not is_premium and config.PAYMENT_PROVIDER_TOKEN:
        keyboard.extend([
            [InlineKeyboardButton("üóì –ú–µ—Å—è—Ü - 20 TJS", callback_data="buy_premium_monthly")],
            [InlineKeyboardButton("üìÖ –ì–æ–¥ - 200 TJS", callback_data="buy_premium_yearly")]
        ])
    elif not config.PAYMENT_PROVIDER_TOKEN:
        text += "\n\n‚ùå <i>–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</i>"

    keyboard.append([InlineKeyboardButton("üìä –ú–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", callback_data="show_my_usage")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_method(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def show_usage_stats_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = query.message.chat.id
    is_premium = db.get_user_subscription_status(user_id)

    daily_messages = db.get_daily_usage(user_id, "messages")
    daily_images = db.get_daily_usage(user_id, "images")

    text = "üìä <b>–í–∞—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"

    # –°–æ–æ–±—â–µ–Ω–∏—è
    max_messages = 1000 if is_premium else 5
    text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: {daily_messages}/{max_messages}\n"

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_images = 50 if is_premium else 2
    text += f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {daily_images}/{max_images}\n\n"

    if is_premium:
        subscription = db.db["subscriptions"].find_one({
            "user_id": user_id,
            "status": "active",
            "expires_at": {"$gt": datetime.now()}
        })
        text += f"üíé Premium –¥–æ: {subscription['expires_at'].strftime('%d.%m.%Y')}"
    else:
        text += "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω"

    await query.edit_message_text(text, parse_mode=ParseMode.HTML)

async def buy_premium_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫—É–ø–∫–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()

    plan_type = query.data.split("_")[-1]  # monthly –∏–ª–∏ yearly
    user_id = query.from_user.id

    # –í–†–ï–ú–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Premium –±–µ–∑ –æ–ø–ª–∞—Ç—ã
    if plan_type == "monthly":
        duration_days = 30
        plan_name = "Premium Monthly"
    else:
        duration_days = 365
        plan_name = "Premium Yearly"

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    subscription_id = str(uuid.uuid4())
    expires_at = datetime.now() + timedelta(days=duration_days)

    subscription = {
        "_id": subscription_id,
        "user_id": user_id,
        "plan": f"premium_{plan_type}",
        "status": "active",
        "created_at": datetime.now(),
        "expires_at": expires_at,
        "payment_id": "test_payment"  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    }

    db.db["subscriptions"].insert_one(subscription)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    payment_record = {
        "_id": str(uuid.uuid4()),
        "user_id": user_id,
        "amount": 25 if plan_type == "monthly" else 200,
        "currency": "TJS",
        "subscription_id": subscription_id,
        "telegram_payment_id": "test_charge_id",
        "created_at": datetime.now()
    }

    db.db["payments"].insert_one(payment_record)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = f"üéâ <b>Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
    text += f"–ü–ª–∞–Ω: {plan_name}\n"
    text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y')}\n\n"
    text += "‚ú® <i>–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</i>\n\n"
    text += "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ Premium —Ñ—É–Ω–∫—Ü–∏–∏!"

    await query.edit_message_text(text, parse_mode=ParseMode.HTML)

async def pre_checkout_callback(update: Update, context: CallbackContext, db):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    query = update.pre_checkout_query

    if query.invoice_payload in ["premium_monthly", "premium_yearly"]:
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")

async def successful_payment_callback(update: Update, context: CallbackContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = update.message.successful_payment
    user_id = update.effective_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    duration_days = 30 if payment.invoice_payload == "premium_monthly" else 365

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription_id = str(uuid.uuid4())
    expires_at = datetime.now() + timedelta(days=duration_days)

    subscription = {
        "_id": subscription_id,
        "user_id": user_id,
        "plan": payment.invoice_payload,
        "status": "active",
        "created_at": datetime.now(),
        "expires_at": expires_at,
        "payment_id": payment.telegram_payment_charge_id
    }

    db.db["subscriptions"].insert_one(subscription)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_record = {
        "_id": str(uuid.uuid4()),
        "user_id": user_id,
        "amount": payment.total_amount / 100,
        "currency": payment.currency,
        "subscription_id": subscription_id,
        "telegram_payment_id": payment.telegram_payment_charge_id,
        "created_at": datetime.now()
    }

    db.db["payments"].insert_one(payment_record)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = f"üéâ <b>Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
    text += f"–ü–ª–∞–Ω: {payment.invoice_payload.replace('_', ' ').title()}\n"
    text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y')}\n\n"
    text += "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ Premium —Ñ—É–Ω–∫—Ü–∏–∏!"

    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
