# balance_handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from datetime import datetime
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram.constants import ParseMode
from utils import register_user_if_not_exists

async def show_balance_handle(update: Update, context: CallbackContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if update.message:
        # –ü—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /balance
        await register_user_if_not_exists(update, context, update.message.from_user, db)
        user_id = update.message.from_user.id
        send_method = update.message.reply_text
    else:
        # –ü—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ callback (–∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)
        user_id = update.callback_query.from_user.id
        send_method = update.callback_query.edit_message_text
        await update.callback_query.answer()

    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    is_premium = db.get_user_subscription_status(user_id)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    daily_messages = db.get_daily_usage(user_id, "messages")
    daily_images = db.get_daily_usage(user_id, "images")

    # –õ–∏–º–∏—Ç—ã
    max_messages = 1000 if is_premium else 5
    max_images = 50 if is_premium else 2

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"

    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if is_premium:
        subscription = db.db["subscriptions"].find_one({
            "user_id": user_id,
            "status": "active",
            "expires_at": {"$gt": datetime.now()}
        })
        text += f"üíé <b>Premium –¥–æ:</b> {subscription['expires_at'].strftime('%d.%m.%Y')}\n\n"
    else:
        text += f"üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω</b>\n\n"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    text += f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: {daily_messages}/{max_messages}\n"
    text += f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {daily_images}/{max_images}\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    n_used_tokens_dict = db.get_user_attribute(user_id, "n_used_tokens")
    n_generated_images = db.get_user_attribute(user_id, "n_generated_images")

    total_tokens = 0
    for model_data in n_used_tokens_dict.values():
        if isinstance(model_data, dict):
            total_tokens += model_data.get("n_input_tokens", 0) + model_data.get("n_output_tokens", 0)

    # –ö–Ω–æ–ø–∫–∞ Premium –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    keyboard = []
    if not is_premium:
        keyboard.append([InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å Premium", callback_data="show_premium_plans")])

    keyboard.append([InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_balance")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await send_method(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except telegram.error.BadRequest as e:
        if str(e).startswith("Message is not modified"):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise
