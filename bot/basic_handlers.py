# basic_handlers.py - –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø
from datetime import datetime
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram.constants import ParseMode
import config
from utils import register_user_if_not_exists, register_group_if_not_exists
from localization import t

async def start_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)
    user_id = update.message.from_user.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())
    db.start_new_dialog(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ —è–∑—ã–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = db.get_user_attribute(user_id, "language")

    if not user_language:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ù–ê –†–£–°–°–ö–û–ú
        text = "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>"

        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language|ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="set_language|en")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        return

    # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    reply_text = t(user_id, "start_greeting", chat_id=update.message.chat.id)
    reply_text += t(user_id, "help_message", chat_id=update.message.chat.id)

    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML)

async def help_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    help_text = t(user_id, "help_message", chat_id=update.message.chat.id)
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def help_group_chat_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)
    user_id = update.message.from_user.id
    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    text = t(user_id, "help_group_chat", chat_id=update.message.chat.id, bot_username="@" + context.bot.username)

    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    await update.message.reply_video(config.help_group_chat_video_path)

async def new_dialog_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)

    user_id = update.message.from_user.id
    chat_id = update.message.chat.id

    # –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    if chat_id > 0:
        db.set_user_attribute(user_id, "last_interaction", datetime.now())
        db.set_user_attribute(user_id, "current_model", config.default_model)
        db.start_new_dialog(user_id)

        success_text = t(user_id, "new_dialog_started", chat_id=chat_id)
        await update.message.reply_text(success_text)

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_mode = db.get_user_attribute(user_id, "current_chat_mode")
        user_language = db.get_user_attribute(user_id, "language") or "en"

        welcome_message = config.chat_modes[chat_mode]["welcome_message"]

        if isinstance(welcome_message, dict):
            welcome_text = welcome_message.get(user_language, welcome_message.get("en", "Welcome!"))
        else:
            welcome_text = welcome_message

        await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML)
    else:
        # –î–ª—è –≥—Ä—É–ø–ø –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        await update.message.reply_text(
            t(user_id, "new_dialog_group_not_supported", chat_id=chat_id),
            parse_mode=ParseMode.HTML
        )

def get_chat_mode_menu(page_index: int, user_id: int, chat_id: int = None, db=None):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è t()
    text = t(user_id, "select_chat_mode", chat_id=chat_id, count=len(config.chat_modes))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø
    if chat_id and chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        current_chat_mode = db.get_group_attribute(chat_id, "current_chat_mode") or "assistant"
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        current_chat_mode = db.get_user_attribute(user_id, "current_chat_mode") or "assistant"

    # buttons
    chat_mode_keys = list(config.chat_modes.keys())
    page_chat_mode_keys = chat_mode_keys[page_index * config.n_chat_modes_per_page:(page_index + 1) * config.n_chat_modes_per_page]

    keyboard = []
    for chat_mode_key in page_chat_mode_keys:
        name = config.chat_modes[chat_mode_key]["name"]

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if chat_mode_key == current_chat_mode:
            name = "‚úÖ " + name

        keyboard.append([InlineKeyboardButton(name, callback_data=f"set_chat_mode|{chat_mode_key}")])

    # pagination
    if len(chat_mode_keys) > config.n_chat_modes_per_page:
        is_first_page = (page_index == 0)
        is_last_page = ((page_index + 1) * config.n_chat_modes_per_page >= len(chat_mode_keys))

        if is_first_page:
            keyboard.append([
                InlineKeyboardButton("¬ª", callback_data=f"show_chat_modes|{page_index + 1}")
            ])
        elif is_last_page:
            keyboard.append([
                InlineKeyboardButton("¬´", callback_data=f"show_chat_modes|{page_index - 1}"),
            ])
        else:
            keyboard.append([
                InlineKeyboardButton("¬´", callback_data=f"show_chat_modes|{page_index - 1}"),
                InlineKeyboardButton("¬ª", callback_data=f"show_chat_modes|{page_index + 1}")
            ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    return text, reply_markup

async def show_chat_modes_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.message.from_user.id
    chat_id = update.message.chat.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    text, reply_markup = get_chat_mode_menu(0, user_id, chat_id=chat_id, db=db)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def show_chat_modes_callback_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.callback_query.from_user.id
    chat_id = update.callback_query.message.chat.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    query = update.callback_query
    await query.answer()

    page_index = int(query.data.split("|")[1])
    if page_index < 0:
        return

    text, reply_markup = get_chat_mode_menu(page_index, user_id, chat_id=chat_id, db=db)
    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except telegram.error.BadRequest as e:
        if str(e).startswith("Message is not modified"):
            pass

async def set_chat_mode_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.callback_query.from_user.id
    chat_id = update.callback_query.message.chat.id

    query = update.callback_query
    await query.answer()

    chat_mode = query.data.split("|")[1]

    # –î–ª—è –≥—Ä—É–ø–ø —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        db.set_group_attribute(chat_id, "current_chat_mode", chat_mode)
        user_language = db.get_group_attribute(chat_id, "language") or "en"
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        db.set_user_attribute(user_id, "current_chat_mode", chat_mode)
        db.start_new_dialog(user_id)
        user_language = db.get_user_attribute(user_id, "language") or "en"

    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–æ–π
    try:
        text, reply_markup = get_chat_mode_menu(0, user_id, chat_id=chat_id, db=db)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except telegram.error.BadRequest as e:
        if str(e).startswith("Message is not modified"):
            pass

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = config.chat_modes[chat_mode]["welcome_message"]

    if isinstance(welcome_message, dict):
        welcome_text = welcome_message.get(user_language, welcome_message.get("en", "Welcome!"))
    else:
        welcome_text = welcome_message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id,
        welcome_text,
        parse_mode=ParseMode.HTML
    )

def get_settings_menu(user_id: int, chat_id: int, db):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        current_model = db.get_group_attribute(chat_id, "current_model")
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        current_model = db.get_user_attribute(user_id, "current_model")

    text = config.models["info"][current_model]["description"]

    text += "\n\n"
    score_dict = config.models["info"][current_model]["scores"]
    for score_key, score_value in score_dict.items():
        text += "üü¢" * score_value + "‚ö™Ô∏è" * (5 - score_value) + f" ‚Äì {score_key}\n\n"

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ t() —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    text += t(user_id, "select_model", chat_id=chat_id)

    # buttons to choose models - –∏—Å–ø–æ–ª—å–∑—É–µ–º available_text_models –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    keyboard = []
    for model_key in config.available_text_models:
        title = config.models["info"][model_key]["name"]
        if model_key == current_model:
            title = "‚úÖ " + title

        keyboard.append([
            InlineKeyboardButton(title, callback_data=f"set_settings|{model_key}")
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    return text, reply_markup

async def settings_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update, context, update.message.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.message.from_user.id
    chat_id = update.message.chat.id

    db.set_user_attribute(user_id, "last_interaction", datetime.now())

    text, reply_markup = get_settings_menu(user_id, chat_id, db)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def set_settings_handle(update: Update, context: CallbackContext, db):
    await register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    from utils import register_group_if_not_exists
    await register_group_if_not_exists(update, context, db)

    user_id = update.callback_query.from_user.id
    chat_id = update.callback_query.message.chat.id

    query = update.callback_query
    await query.answer()

    _, model_key = query.data.split("|")

    # –î–ª—è –≥—Ä—É–ø–ø —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã
    if chat_id < 0:  # –ì—Ä—É–ø–ø–∞
        db.set_group_attribute(chat_id, "current_model", model_key)
    else:  # –õ–∏—á–Ω—ã–π —á–∞—Ç
        db.set_user_attribute(user_id, "current_model", model_key)
        db.start_new_dialog(user_id)

    text, reply_markup = get_settings_menu(user_id, chat_id, db)
    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    except telegram.error.BadRequest as e:
        if str(e).startswith("Message is not modified"):
            pass
